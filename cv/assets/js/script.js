"use strict";var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,n,a){return n&&t(e.prototype,n),a&&t(e,a),e}}();function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}$(document).ready(function(){AOS.init();for(var t=d3.select.bind(d3),e=document.body.clientWidth,n=35,a=25,i=t("svg").attr("width",e).attr("height",n),o=function(){function t(o,s,r,h){_classCallCheck(this,t),this.piScaled=2*Math.PI/o,this.amplitude=s,this.offset=r,this.opacity=h,this.path=i.append("path").attr("stroke","url(#loaderGradient)").attr("fill","none").attr("stroke-opacity",h),this.line=d3.svg.line().x(function(t){return t.index}).y(function(t){var i,o=Math.abs(e/2-t.index)-(e/2*l-a/2);return i=Math.cos(Math.PI*Math.max(0,Math.min(a,o))/a)/2+.5,n/2+t.value*i})}return _createClass(t,[{key:"draw",value:function(){this.path.attr("d",this.generatePath())}},{key:"generatePath",value:function(){for(var t=[],n=0;n<e;++n)t.push({value:Math.sin((n+this.offset)*this.piScaled)*this.amplitude,index:n});return this.line(t)}}]),t}(),s=[],r=0;r<2;++r){var h=new o(2.5*n+Math.random()*n*8,n/2-Math.random()*n/4,12.5*r+5*Math.random(),.25+.75*Math.random());h.draw(),s.push(h)}var l=0,c=1;!function t(e){l>1&&c>0?c=-5:l<0&&c<0&&(c=1),l+=.003*c;for(var n=0;n<s.length;++n)s[n].offset+=((n+1)%2*2-1)*(.2*Math.random()+.9),s[n].draw();requestAnimationFrame(t)}()}),$(window).enllax(),function(t,e){e(function(){setTimeout(function(){e("body").removeClass("fade"),e(".loader-wrapper").addClass("isHide"),e(".loader-wrapper").css("display","none")},3e3),e(".ripple").on("click",function(n){n.preventDefault();var a=e("<div/>"),i=e(this).offset(),o=n.pageX-i.left,s=n.pageY-i.top;a.addClass("ripple-effect");var r=e(".ripple-effect");r.css("height",e(this).height()),r.css("width",e(this).height()),a.css({top:s-r.height()/2,left:o-r.width()/2,background:e(this).data("ripple-color")}).appendTo(e(this)),t.setTimeout(function(){a.remove()},2e3)})})}(window,jQuery),$(document).ready(function(){var t=100;$(".more").each(function(){var e=$(this).html();if(e.length>t){var n=e.substr(0,t)+'<span class="moreellipses">...&nbsp;</span><span class="morecontent"><span>'+e.substr(t,e.length-t)+'</span>&nbsp;&nbsp;<a href="" class="morelink"></a></span>';$(this).html(n)}})}),$(document).ready(function(){var t=window.location.href;function e(){var t=$("#content-sub"),e=t.height(),n=t.width(),a=$("#footer"),i=a.height(),o=a.width();console.log("Content Height = "+e+"px"),console.log("Content Width = "+n+"px"),console.log("Footer Height = "+i+"px"),console.log("Footer Width = "+o+"px"),t.css({"margin-bottom":i+35})}$(".site-nav a").each(function(){this.href===t&&$(this).addClass("site-nav__link--active")}),$(window).scroll(function(){$(window).scrollTop()>150?$(".site-header").addClass("pingned"):$(".site-header").removeClass("pingned")}),e(),$(window).resize(function(){e()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
